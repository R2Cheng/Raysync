{"name": "新用户创建-创建已存在的账号，创建失败--预期成功", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'account already existed' in 'Account already existed'\n +  where 'Account already existed' = <built-in method get of dict object at 0x000002299B03AB40>('message')\n +    where <built-in method get of dict object at 0x000002299B03AB40> = {'action': 'CREATE_USER_RESPONSE', 'device': '00:0c:29:96:7f:4a', 'id': 1604300376, 'message': 'Account already existed', ...}.get\n +      where {'action': 'CREATE_USER_RESPONSE', 'device': '00:0c:29:96:7f:4a', 'id': 1604300376, 'message': 'Account already existed', ...} = <bound method Response.json of <Response [200]>>()\n +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json", "trace": "self = <testcases.scenario_test.test_06_raysync_create_user.TestRegLogList object at 0x000002299B09E780>\ntestcase_data = {'account': 'raysync_test', 'email': 'raysync_test@email.com', 'emailSenderType': 1, 'except_msg': 'account already existed', ...}\n\n    @allure.story(\"用例--新用户创建--预期成功\")\n    @allure.description(\"该用例是针对业务场景的测试\")\n    @allure.title(\"新用户创建-创建已存在的账号，创建失败--预期成功\")\n    @pytest.mark.multiple\n    # @pytest.mark.usefixtures(\"\")#执行用例前可以进行前置操作(数据库操作,尽量不使用)\n    def test_raysync_create_account_only_20(self, testcase_data):\n        name = testcase_data[\"name\"]\n        account = testcase_data[\"account\"]\n        password = testcase_data[\"password\"]\n        needUpdatapwd = testcase_data[\"needUpdatapwd\"]\n        email = testcase_data[\"email\"]\n        permission = testcase_data[\"permission\"]\n        emailSenderType = testcase_data[\"emailSenderType\"]\n        except_result = testcase_data[\"except_result\"]\n        except_msg = testcase_data[\"except_msg\"]\n        logger.info(\"*************** 获取token ***************\")\n        token = step_1()\n        logger.info(\"*************** 如创建用户存在，执行先删除改用户 ***************\")\n        step_2(token, account)\n        logger.info(\"*************** 开始执行用例 ***************\")\n        result_createUser = admin_createuser(token, name=name, account=account, passwd=password,\n                                             needUpdatePwd=needUpdatapwd, email=email, permission=permission,\n                                             emailSenderType=emailSenderType)\n        assert result_createUser.json().get(\"result\") == 0\n        assert \"OK\" in result_createUser.json().get(\"message\")\n    \n        logger.info(\"*************** 创建已存在的账号验证 ***************\")\n        result_createUser2 = admin_createuser(token, name=name, account=account, passwd=password,\n                                             needUpdatePwd=needUpdatapwd, email=\"test1@email.coim\", permission=permission,\n                                             emailSenderType=emailSenderType)\n        assert result_createUser2.json().get(\"result\") == except_result\n>       assert except_msg in result_createUser2.json().get(\"message\")\nE       AssertionError: assert 'account already existed' in 'Account already existed'\nE        +  where 'Account already existed' = <built-in method get of dict object at 0x000002299B03AB40>('message')\nE        +    where <built-in method get of dict object at 0x000002299B03AB40> = {'action': 'CREATE_USER_RESPONSE', 'device': '00:0c:29:96:7f:4a', 'id': 1604300376, 'message': 'Account already existed', ...}.get\nE        +      where {'action': 'CREATE_USER_RESPONSE', 'device': '00:0c:29:96:7f:4a', 'id': 1604300376, 'message': 'Account already existed', ...} = <bound method Response.json of <Response [200]>>()\nE        +        where <bound method Response.json of <Response [200]>> = <Response [200]>.json\n\ntest_06_raysync_create_user.py:1091: AssertionError"}, "description": "该用例是针对业务场景的测试", "steps": [{"name": "获取token", "status": "passed", "start": 1604300376356, "stop": 1604300376405}, {"name": "如创建用户存在，执行先删除改用户", "status": "passed", "parameters": [{"name": "token", "value": "'kVnrR6bPe9sM8DNnWhYDEVb0PlXKWYx5DXaq7fYK'"}, {"name": "account", "value": "'raysync_test'"}], "start": 1604300376406, "stop": 1604300376473}], "attachments": [{"name": "log", "source": "1b1c2ee3-478a-46b8-b191-84a8a9393cff-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "fc11409d-027f-4164-a4f8-2ff908bb27f3-attachment.txt", "type": "text/plain"}], "start": 1604300376356, "stop": 1604300376542, "uuid": "d746923f-d223-4863-afaa-62b0535215d2", "historyId": "7a3977cf89ea74f8092065fcf2b8a48d", "testCaseId": "8fcb929a6e91339d7b7c379b0581f250", "fullName": "testcases.scenario_test.test_06_raysync_create_user.TestRegLogList#test_raysync_create_account_only_20", "labels": [{"name": "epic", "value": "针对业务场景的测试"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "场景：创建新用户"}, {"name": "story", "value": "用例--新用户创建--预期成功"}, {"name": "tag", "value": "multiple"}, {"name": "parentSuite", "value": "testcases.scenario_test"}, {"name": "suite", "value": "test_06_raysync_create_user"}, {"name": "subSuite", "value": "TestRegLogList"}, {"name": "host", "value": "linsijie"}, {"name": "thread", "value": "136120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.scenario_test.test_06_raysync_create_user"}]}